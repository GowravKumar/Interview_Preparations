/**
Q4. Repeating Subsequence

Problem Description

Given a string A, find if there is any subsequence that repeats itself.

A subsequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.

NOTE: Subsequence length should be greater than or equal to 2.



Problem Constraints

1 <= length(A) <= 100



Input Format

The first and the only argument of input contains a string A.



Output Format

Return an integer, 1 if there is any subsequence which repeat itself else return 0.



Example Input

Input 1:

 A = "abab"
Input 2:

 A = "abba"


Example Output

Output 1:

 1
Output 2:

 0


Example Explanation

Explanation 1:

 "ab" is repeated.
Explanation 2:

 There is no repeating subsequence.
*/

package DynamicProgramming2;

class RepeatingSubsequence {

	public int anytwo(String A) {
		int n = A.length();
		int dp[][] = new int[n + 1][n + 1];
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				int count;
				if (i != j && A.charAt(i - 1) == A.charAt(j - 1)) {
					count = 1 + dp[i - 1][j - 1];
				} else {
					count = Math.max(dp[i][j - 1], dp[i - 1][j]);
				}
				if (count > 1)
					return 1;
				else
					dp[i][j] = count;
			}
		}
		return 0;
	}


	public static void main(String[] args) {
		RepeatingSubsequence rs = new RepeatingSubsequence();
		int ans = rs.anytwo("abab");
		System.out.println(ans);
	}

}